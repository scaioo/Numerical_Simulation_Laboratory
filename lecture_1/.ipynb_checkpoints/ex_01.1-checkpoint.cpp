#include <iostream>
#include <cmath>
#include <fstream>
#include <numeric>
using namespace std;
double error(vector<double> &AV,vector<double> &AV2,int n){
    if(n==0) 
        return 0;
    else
        return sqrt((AV2[n] - AV[n] * AV[n]) / n);

} 

int main(){
    int M = 100000;             // Total number of throws
    int N = 100;                // Number of blocks
    int L = M / N;              // Number of throws in each block, please use for M a multiple of N
    //load random numbers generated by a pseudo-random number generator from the file 'data.dat'
    string ifilename="../random_number/data.dat";
    ifstream inputFile(ifilename);
    // Verify if the file is loaded correctly
    if (!inputFile.is_open()) {
        cerr << "Unable to open file: " << ifilename << endl;
        return 1; // Exit from the program with an error code
    }
    // load all the random numbers on a vector
    vector<double> randomNumbers;
    int count=0;
    int num;
    while{count<M && InFile>>num}{
        randomNumbers.push_back(num)
    }
    //close the file
    InputFile.close();
    vector<int> x(N) //define a vector of from x=[0,...,N-1]
    iota(x.begin(),x.end(),0)
    // define 5 zeroes vectors of dimension N
    vector<double> ave(N,0.0);
    vector<double> av2(N,0.0);
    vector<double> sum_prog(N,0.0);
    vector<double> su2_prog(N,0.0);
    vector<double> err_prog(N,0.0);
    // calculation of uncertainty
    for(int i=0;i<N;i++){
        double sum=0;
        for(int j=0;j<L;j++){
            k=j+i*L;
            sum+=randomNumbers[k];
        }
        ave[i] = sum/L;
        av2[i] = (ave[i])**2;
        
    }
    for(int i=0; i<N;i++){
        for(int j=0;j<i+1;j++){
            sum_prog[i]+=ave[j]; // Sum j{0..i} r_j
            su2_prog[i]+=av2[j]; // Sum j{0..i} (r_j)^2
        }
        sum_prog[i]/=(i+1);  // Cumulative average
        su2_prog[i]/=(i+1);  // Cumulative square average
        err_prog[i] = error(sum_prog,su2_prog,i) // Statistical uncertainty
    }
    // saving results on output.txt
    string ofilename="output.txt";
    ofstream outputFile(ofilename);
    // Verify if the file is created correctly
    if (!outputFile.is_open()) {
        cerr << "Impossibile aprire il file per la scrittura." << endl;
        return 1; // Exiting with an error code
    }
    //Iniializing first line
    outputFile << "Number of throws;Integral value; error" << endl;
    for(int i=0;i<N;i++){
        outputFile << x[i] << ";" << sum_prog[i] << ";" << err_prog[i] << endl;
    }
    return 0;
}